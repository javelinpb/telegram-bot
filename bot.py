import sqlite3
import datetime
import logging
from collections import defaultdict
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TELEGRAM_TOKEN = "7525233908:AAHWcQqjE-BO8BeW66bmhGrwYm6FvWus6lQ"
user_action_counts = defaultdict(int)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

conn = sqlite3.connect("birthdays.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS birthdays (
        user_id INTEGER,
        name TEXT,
        date TEXT
    )
''')
conn.commit()

def detect_gender(name: str) -> str:
    first_name = name.strip().split()[0].lower()
    return 'female' if first_name[-1] in ['–∞', '—è'] else 'male'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute('SELECT COUNT(*) FROM birthdays WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]

    text = ("üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö.\n\n"
            "<b>–ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ:</b>\n"
            "‚Äî –ó–∞ –¥–µ–Ω—å –¥–æ –î–†\n"
            "‚Äî –í —Å–∞–º –¥–µ–Ω—å –î–† üéÇ\n\n"
            "üìå <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>/add –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/add –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 16.05.1992</code>\n\n"
            "<code>/list</code> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π\n"
            "<code>/remove –ò–º—è</code> ‚Äî —É–¥–∞–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ (–º–æ–∂–Ω–æ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏)\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/remove –ò–≤–∞–Ω</code>\n\n"
            "<code>/check</code> ‚Äî –∫—Ç–æ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è\n\n")

    if count == 0:
        text += ("üéà <b>–í—Å—ë –ø—Ä–æ—Å—Ç–æ</b> ‚Äî –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã <code>/add</code>, <b>—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –¥–∞—Ç—É.</b>\n"
                 "‚ù§Ô∏è –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.\n\n"
                 "–ù–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ üîî ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
    else:
        text += "–ù–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ üîî ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!"

    await update.message.reply_text(text, parse_mode="HTML")

async def add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        name = " ".join(context.args[:-1])
        raw_date = context.args[-1]
        datetime.datetime.strptime(raw_date, "%d.%m.%Y")
        user_id = update.effective_user.id

        cursor.execute('INSERT INTO birthdays (user_id, name, date) VALUES (?, ?, ?)', (user_id, name, raw_date))
        conn.commit()

        cursor.execute('SELECT COUNT(*) FROM birthdays WHERE user_id = ?', (user_id,))
        count = cursor.fetchone()[0]

        gender = detect_gender(name)
        verb = "–¥–æ–±–∞–≤–ª–µ–Ω–∞" if gender == "female" else "–¥–æ–±–∞–≤–ª–µ–Ω"
        pronoun = "–µ—ë" if gender == "female" else "–µ–≥–æ"

        if count == 1:
            await update.message.reply_text(
                f"""
üéà <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ\n\n
‚úÖ <b>{name}</b> —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è <b>{raw_date}</b> {verb}.\n\n
üì¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å:\n
‚Äî –ó–∞ –¥–µ–Ω—å –¥–æ {pronoun} –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è\n
‚Äî –í —Å–∞–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ\n\n
üßæ <code>/list</code> ‚Äî –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –ª—é–¥–µ–π.\n\n
üóë –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ <code>/remove</code> –∏ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –æ–±–∞ —Å–ª–æ–≤–∞.\n
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/remove {name.split()[0]}</code>, <code>/remove {name.split()[-1]}</code> –∏–ª–∏ <code>/remove {name}</code>\n\n
‚ù§Ô∏è –Ø –Ω–∞–ø–æ–º–Ω—é –≤–æ–≤—Ä–µ–º—è ‚Äî –∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.
                """,
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(f"‚úÖ {name} —Å –¥–∞—Ç–æ–π {raw_date} {verb}.", parse_mode="HTML")
            if count % 2 == 1:
                await update.message.reply_text("‚ÑπÔ∏è –í–≤–µ–¥–∏ <code>/list</code> ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –ø–µ—Ä–µ–¥ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —É–∂–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üéÇ", parse_mode="HTML")

        user_action_counts[user_id] += 1
        if user_action_counts[user_id] % 5 == 0:
            await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚Äî –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>/help</code>", parse_mode="HTML")

    except (IndexError, ValueError):
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–∏—à–∏: <code>/add –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì</code>\n–ü—Ä–∏–º–µ—Ä: <code>/add –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 12.03.1990</code>", parse_mode="HTML")

async def remove_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n–ü—Ä–∏–º–µ—Ä: <code>/remove –ò–≤–∞–Ω</code>", parse_mode="HTML")
        return

    keyword = " ".join(context.args).strip().lower()
    cursor.execute('SELECT name FROM birthdays WHERE user_id = ?', (user_id,))
    all_names = cursor.fetchall()
    deleted = []

    for (name,) in all_names:
        if keyword in name.lower():
            cursor.execute('DELETE FROM birthdays WHERE user_id = ? AND name = ?', (user_id, name))
            deleted.append((name, detect_gender(name)))

    conn.commit()

    if not deleted:
        await update.message.reply_text("üôÖ‚Äç‚ôÇÔ∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="HTML")
    elif len(deleted) == 1:
        gender = deleted[0][1]
        verb = "–£–¥–∞–ª–µ–Ω–∞" if gender == "female" else "–£–¥–∞–ª—ë–Ω"
        await update.message.reply_text(f"üóë {verb}: {deleted[0][0]}", parse_mode="HTML")
    else:
        await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω—ã: {', '.join(name for name, _ in deleted)}", parse_mode="HTML")

    user_action_counts[user_id] += 1
    if user_action_counts[user_id] % 5 == 0:
        await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚Äî –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>/help</code>", parse_mode="HTML")

async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute('SELECT name, date FROM birthdays WHERE user_id = ?', (user_id,))
    rows = cursor.fetchall()
    if rows:
        reply = "<b>üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö:</b>\n" + "\n".join([f"{name}: {date}" for name, date in rows])
        reply += "\n\nüóë –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É\n<code>/remove</code> –∏ —É–∫–∞–∂–∏ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –æ–±–∞ —Å–ª–æ–≤–∞.\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
        examples = []
        for name, _ in rows[:3]:
            parts = name.strip().split()
            if len(parts) == 1:
                examples.append(f"<code>/remove {parts[0]}</code>")
            elif len(parts) >= 2:
                examples.append(f"<code>/remove {parts[0]}</code>")
                examples.append(f"<code>/remove {parts[1]}</code>")
                examples.append(f"<code>/remove {name}</code>")

        reply += "–ù–∞–ø—Ä–∏–º–µ—Ä: " + ", ".join(examples)
    else:
        reply = "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∫–æ–≥–æ-—Ç–æ —á–µ—Ä–µ–∑ <code>/add</code>"
    await update.message.reply_text(reply, parse_mode="HTML")

async def check_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now().strftime("%d.%m")
    cursor.execute('SELECT name, date FROM birthdays')
    rows = cursor.fetchall()
    celebrants = []
    for name, full_date in rows:
        if full_date.startswith(today):
            birth_year = int(full_date.split(".")[-1])
            current_year = datetime.datetime.now().year
            age = current_year - birth_year
            celebrants.append(f"üéâ {name} ‚Äî {age} –ª–µ—Ç!")
    if celebrants:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n" + "\n".join(celebrants), parse_mode="HTML")
    else:
        await update.message.reply_text("üéà –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç", parse_mode="HTML")

    user_id = update.effective_user.id
    user_action_counts[user_id] += 1
    if user_action_counts[user_id] % 5 == 0:
        await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚Äî –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>/help</code>", parse_mode="HTML")

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", start))
app.add_handler(CommandHandler("add", add_birthday))
app.add_handler(CommandHandler("remove", remove_birthday))
app.add_handler(CommandHandler("list", list_birthdays))
app.add_handler(CommandHandler("check", check_today))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
